#include <unistd.h>
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <signal.h>
#include <sys/time.h>
#include <sys/shm.h>
#include <sys/ipc.h>
#include <string.h>
#include <sys/msg.h>
#include <time.h>


//shared memory
#define SHMKEY  960158     /* Parent and child agree on common key.*/
#define BUFF_SZ sizeof ( int )


//message queue struct from https://www.tutorialspoint.com/inter_process_communication/inter_process_communication_message_queues.htm
#define PERMS 0644
struct my_msgbuf {
   long mtype;
   char mtext[200];
};


//using form provided OS_tutorial
void print_usage ( const char * app )
{
        fprintf (stderr, "usage: %s [-h] [-n maxChildren] [-s existChildren] [-m increment]\n",app);
        fprintf (stderr, "    maxChildrem is max of children created total\n");
        fprintf (stderr, "    existChildren is max children at one time\n");
        fprintf (stderr, "    increment is the amount children increment clock \n\n");
}


//main body
int main(int argc, char** argv)
{

        //message queue
        //https://www.tutorialspoint.com/inter_process_communication/inter_process_communication_message_queues.htm
        struct my_msgbuf buf;
        int msqid;
        int len;
        key_t key;
        system("touch msgq.txt");

        int q;
        int w;
        int s;

        //clock variable
        int clockSec = 0;
        int clockNano = 0;
        int clockRand = 0;
        int clockRandNano = 0;

        int c = argc;
        printf("Argc is %d\n", c);

        int opt;


        switch(c)
        {
                case 1:
                        print_usage ( argv[0] );
                        return ( EXIT_SUCCESS );
                case 2:
                        q = atoi(argv[1]);
                        break;
                        printf("We are in switch case 2\n");
                case 3:
                        q = atoi(argv[1]);
                        w = atoi(argv[2]);
                        printf("We are in switch case 3\n");
                        break;
                case 4:
                        q = atoi(argv[1]);
                        w = atoi(argv[2]);
                        s = atoi(argv[3]);
                        printf("We are in switch case 4\n");
                        break;
                default: /* '?' */
                        printf ( "Invalid option %c\n", optopt );
                        print_usage ( argv[0] );
                        return ( EXIT_FAILURE );

        }

        printf("Arguments: %d\n", argv[0]);
        printf("Arguments: %d\n", q);
        printf("Arguments: %d\n", w);
        printf("Arguments: %d\n", s);


        if ((key = ftok("msgq.txt", 'B')) == -1)

        {
                perror("ftok");
                exit(1);
        }
          
        if ((msqid = msgget(key, PERMS | IPC_CREAT)) == -1)
        {
                perror("msgget");
                exit(1);
        }
        printf("OSS: Message Queue: Set up and ready to send\n");
        buf.mtype = 1;

        strcpy(buf.mtext, "OSS: Sending message queue");
        len = strlen(buf.mtext);

        if (msgsnd(msqid, &buf, len+1, 0) == -1) /* +1 for '\0' */
        {
                perror("msgsnd");
        }

        //CREATION OF SHARED MEMORY
        int shmid1 = shmget ( SHMKEY, BUFF_SZ, 9045 | IPC_CREAT );
        int shmid2 = shmget ( SHMKEY, BUFF_SZ, 9046 | IPC_CREAT );

        char *secClock = (char*) shmat(shmid1,NULL, 0);
        char *nanoClock = (char*) shmat(shmid2,NULL, 0);

        int *sharedClockSec = (int*) (secClock);
        int *sharedClockNano = (int*) (nanoClock);

        int i;
        int j;

        int procs = 0;

        //argument array for worker, cannot figure out how to convert m value into a string so just passing default m value
        static char *workerArr[] = {"./worker", NULL, NULL};
        workerArr[1] = "1";

        //keeps number of active processes below 18
        while(procs < 18)
        {
                if(clockNano >= 1000000000)
                {
                        clockNano -= 1000000000;
                        clockSec += 1;
                }


                printf("OSS: Message Queue: Inside Loop\n");
                pid_t childPid = fork();
                procs++;

                clockRand = rand() % 1000;
                clockRandNano = clockRand * 1000;

                wait(1);
                printf("OSS: Message Queue: forked\n");
                if (childPid < 0)
                {
                        perror("ERROR: something got a little forked up\n");
                        exit(EXIT_FAILURE);
                }
                else if (childPid == 0)
                {
                        clockNano += clockRandNano;
                        printf("OSS: Process %d entering at", childPid);
                        printf(" %d:", clockSec);
                        printf("%d seconds", clockNano);
                        printf(" running for %d\n", clockRandNano);

                        execv(workerArr[0], workerArr);
                        fprintf(stderr,"Exec failed, terminating\n");
                        procs--;
                        exit(1);
                }
                procs++;
                wait(1);
        }

        printf("OSS: The Great Termination Cometh\n");

        //freeing from shared memory
        shmdt(sharedClockSec);
        shmctl(shmid1, IPC_RMID, NULL);
        shmdt(sharedClockNano);
        shmctl(shmid2, IPC_RMID, NULL);
        return EXIT_SUCCESS;

}
