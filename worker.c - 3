#include <unistd.h>
#include <sys/types.h>
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <signal.h>
#include <sys/time.h>
#include <sys/shm.h>
#include <sys/ipc.h>
#include <sys/msg.h>
#include <string.h>

#define SHMKEY  960158     /* Parent and child agree on common key.*/
#define BUFF_SZ sizeof ( int )

//message buffer from https://www.tutorialspoint.com/inter_process_communication/inter_process_communication_message_queues.htm
#define PERMS 0644
struct my_msgbuf {
   long mtype;
   char mtext[200];
};

int main(int argc, char** argv)
{
        printf("Worker: We are in the child class\n");
        int shmid1 = shmget ( SHMKEY, BUFF_SZ, 9045);
        int shmid2 = shmget ( SHMKEY, BUFF_SZ, 9046);

        //initializing needed variables for message buffer
        struct my_msgbuf buf;
        int msqid;
        int toend;
        int len;
        key_t key;
        char *msgText = "(Un)Locked and ready to go";
        system("touch msgq.txt");

        //atteching key to shared memory
        if ((key = ftok("msgq.txt", 'B')) == -1)
        {
                perror("ftok");
                exit(1);
        }
        if ((msqid = msgget(key, PERMS | IPC_CREAT)) == -1)
        {
                perror("msgget");
                exit(1);
        }

        //intializing variables and setting value of m to passed parameter m from parent
        int m = atoi(argv[1]);
        int x;
        int i;
        printf("Worker: the value of m is: %d\n", m);
        //shared memory integers
        char *secClock = (char*) (shmat(SHMKEY, NULL, 9045));
        char *nanoClock = (char*) (shmat(SHMKEY, NULL , 9046));


        int *sharedSecClock = (int*)(secClock);
        int *sharedNanoClock = (int*)(nanoClock);

        printf("Worker: about to enter the for loop\n");
        /*message receive before critical section
         *both send and receive functions adapted from
         *https://www.tutorialspoint.com/inter_process_communication/inter_process_communication_message_queues.htm
         */

        printf("Worker: %d",getpid());
        printf(": Iteration %d:", m);

        //sending message after critical section
        buf.mtype = 1;
        strcpy(buf.mtext, msgText);
        len = strlen(buf.mtext);
        if(msgsnd(msqid, &buf, len+1, 0) == -1)
        {
                perror("msgsnd");
        }

        printf("\nWorker is now ending.\n\n");
        //freeing memory
        shmdt(secClock);
        shmdt(sharedSecClock);
        sleep(3);
        return EXIT_SUCCESS;
}
